use std::fs;
use std::fmt::Debug;
use std::io;
use std::io::prelude::*;
use std::str::FromStr;

pub const X: [f64; 120] = [
    178.0133881,
    178.0633881,
    178.1133881,
    178.1633881,
    178.2133881,
    178.2633881,
    178.3133881,
    178.3633881,
    178.4133881,
    178.4633881,
    178.5133881,
    178.5633881,
    178.6133881,
    178.6633881,
    178.7133881,
    178.7633881,
    178.8133881,
    178.8633881,
    178.9133881,
    178.9633881,
    179.0133881,
    179.0633881,
    179.1133881,
    179.1633881,
    179.2133881,
    179.2633881,
    179.3133881,
    179.3633881,
    179.4133881,
    179.4633881,
    179.5133881,
    179.5633881,
    179.6133881,
    179.6633881,
    179.7133881,
    179.7633881,
    179.8133881,
    179.8633881,
    179.9133881,
    179.9633881,
    180.0133881,
    180.0633881,
    180.1133881,
    180.1633881,
    180.2133881,
    180.2633881,
    180.3133881,
    180.3633881,
    180.4133881,
    180.4633881,
    180.5133881,
    180.5633881,
    180.6133881,
    180.6633881,
    180.7133881,
    180.7633881,
    180.8133881,
    180.8633881,
    180.9133881,
    180.9633881,
    181.0133881,
    181.0633881,
    181.1133881,
    181.1633881,
    181.2133881,
    181.2633881,
    181.3133881,
    181.3633881,
    181.4133881,
    181.4633881,
    181.5133881,
    181.5633881,
    181.6133881,
    181.6633881,
    181.7133881,
    181.7633881,
    181.8133881,
    181.8633881,
    181.9133881,
    181.9633881,
    182.0133881,
    182.0633881,
    182.1133881,
    182.1633881,
    182.2133881,
    182.2633881,
    182.3133881,
    182.3633881,
    182.4133881,
    182.4633881,
    182.5133881,
    182.5633881,
    182.6133881,
    182.6633881,
    182.7133881,
    182.7633881,
    182.8133881,
    182.8633881,
    182.9133881,
    182.9633881,
    183.0133881,
    183.0633881,
    183.1133881,
    183.1633881,
    183.2133881,
    183.2633881,
    183.3133881,
    183.3633881,
    183.4133881,
    183.4633881,
    183.5133881,
    183.5633881,
    183.6133881,
    183.6633881,
    183.7133881,
    183.7633881,
    183.8133881,
    183.8633881,
    183.9133881,
    183.9633881,
];

pub const Y: [f32; 120] = [
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    0.00000000e+000,
    2.56644798e-306,
    2.36712650e-287,
    5.45821326e-269,
    3.14644080e-251,
    4.53449222e-234,
    1.63372062e-217,
    1.47152265e-201,
    3.31356994e-186,
    1.86537162e-171,
    2.62527389e-157,
    9.23685034e-144,
    8.12481022e-131,
    1.78666272e-118,
    9.82227202e-107,
    1.34996146e-095,
    4.63842796e-085,
    3.98437580e-075,
    8.55637484e-066,
    4.59366523e-057,
    6.16550869e-049,
    2.06880005e-041,
    1.73543421e-034,
    3.63946729e-028,
    1.90812807e-022,
    2.50102049e-017,
    8.19534069e-013,
    6.71362078e-009,
    1.37494913e-005,
    7.03973789e-003,
    9.01086283e-001,
    2.88347572e+001,
    2.30678039e+002,
    4.61356067e+002,
    2.30678039e+002,
    2.88347572e+001,
    9.01086282e-001,
    7.03973789e-003,
    1.37494913e-005,
    6.71362078e-009,
    8.19534069e-013,
    2.50102049e-017,
    1.90812807e-022,
    3.73522545e-028,
    5.52326816e-024,
    7.96446314e-019,
    2.87115683e-014,
    2.58760128e-010,
    5.83012451e-007,
    3.28396360e-004,
    4.62443703e-002,
    1.62801888e+000,
    1.43284772e+001,
    3.15268564e+001,
    1.73420858e+001,
    2.38485526e+000,
    8.19903522e-002,
    7.04698765e-004,
    1.51420369e-006,
    8.13401785e-010,
    1.09236047e-013,
    3.66747244e-018,
    3.07827755e-023,
    6.60340685e-029,
    8.58463341e-025,
    1.27892602e-019,
    4.76331306e-015,
    4.43519643e-011,
    1.03242051e-007,
    6.00814520e-005,
    8.74106296e-003,
    3.17927510e-001,
    2.89089289e+000,
    6.57167267e+000,
    3.73473575e+000,
    5.30620306e-001,
    1.88472453e-002,
    1.67360103e-004,
    3.71531821e-007,
    2.06195950e-010,
    2.86091052e-014,
    9.92358176e-019,
    8.60543168e-024,
    1.86920002e-029,
    2.34676396e-026,
    3.81706113e-021,
    1.55213272e-016,
    1.57786057e-012,
    4.01003742e-009,
    2.54781716e-006,
    4.04695266e-004,
    1.60704494e-002,
    1.59539398e-001,
    3.95956894e-001,
    2.45678924e-001,
    3.81090326e-002,
    1.47784191e-003,
    1.43274225e-005,
    3.47254742e-008,
    2.10410949e-011,
    3.18734091e-015,
    1.20705965e-019,
    1.14279670e-024,
    2.70488779e-030,
    1.60055117e-036,
    2.36771760e-043,
    8.75649442e-051,
    8.09600335e-059,
    1.87133317e-067,
    1.08136319e-076,
    1.56218362e-086,
    5.64199389e-097,
];

pub const NOISE: [f32; 120] = [
    0.34864356,
    5.91395866,
    4.5222329,
    7.51263225,
    4.10937959,
    4.9632324,
    6.42652541,
    3.27311384,
    3.7922097,
    5.48460623,
    3.48474642,
    3.9238503,
    4.18766108,
    1.46394053,
    6.02922007,
    4.0271112,
    2.6745845,
    4.29825505,
    4.22293994,
    5.14947769,
    4.55949922,
    5.01494654,
    5.6999031,
    4.28436999,
    1.96442925,
    2.80172306,
    3.04982746,
    3.66059495,
    3.37319575,
    3.11767698,
    6.6448879,
    1.90209436,
    2.73201706,
    7.73817956,
    7.53043994,
    5.60477326,
    5.07951505,
    2.56985404,
    6.15735475,
    0.99034484,
    3.89140329,
    8.57945436,
    3.65834628,
    5.9527014,
    5.15638485,
    4.96659024,
    4.26771117,
    5.61158195,
    5.3347695,
    7.43477713,
    4.4625324,
    4.30350925,
    2.92313984,
    2.40604287,
    4.47688011,
    2.93707037,
    4.31824093,
    7.11322315,
    5.39864835,
    4.90603022,
    8.3639484,
    8.74120932,
    5.62357693,
    4.22618626,
    4.77557068,
    4.8637827,
    1.80422783,
    5.633375,
    5.22284019,
    3.43180897,
    2.31302147,
    3.9766173,
    3.16177907,
    3.96612336,
    4.73926206,
    0.17279106,
    3.72155617,
    4.98773818,
    4.82576684,
    4.28218237,
    6.17420839,
    6.44073895,
    5.48470948,
    2.41811019,
    3.8312978,
    5.52075819,
    4.17294084,
    7.20275933,
    -0.10946079,
    3.64239467,
    3.11674447,
    5.45974438,
    6.27418143,
    7.90476631,
    5.51550386,
    8.23855477,
    3.40803445,
    8.2597136,
    7.09973371,
    4.71502327,
    6.09257312,
    4.23845484,
    4.71679305,
    4.36188133,
    4.58777244,
    8.0725947,
    4.5383582,
    7.8886067,
    1.9701946,
    6.85941055,
    7.95231566,
    4.82107402,
    6.66831242,
    7.68903483,
    0.41348688,
    8.25047708,
    5.48795934,
    7.13321768,
    5.29119106,
    5.49419693,
];


pub fn read_1col<T: FromStr>(path: &str) -> io::Result<Vec<T>> {
    let mut f = fs::File::open(path)?;
    let mut buffer = String::new();
    f.read_to_string(&mut buffer)?;
    let values: Vec<T> = buffer.split_ascii_whitespace().into_iter().map(|line| -> T {
            match line.parse::<T>() {
                Ok(v) => v,
                Err(_err) => {
                    panic!("Unable to parse line {}", line)
                }
            }
        }).collect();
    Ok(values)
}


pub fn read_cols<T: FromStr, const N: usize>(path: &str) -> io::Result<Vec<Vec<T>>> {
    let mut f = fs::File::open(path)?;
    let mut buffer = String::new();
    f.read_to_string(&mut buffer)?;

    let mut cols: Vec<Vec<T>> = Vec::new();
    for _ in 0..N {
        cols.push(Vec::new());
    }

    buffer.split('\n').into_iter().enumerate().filter(|(_j, line)| line.len() > 0).for_each(|(j, line)| {
        line.split("\t").into_iter().enumerate().for_each(|(i, col)| {
            match col.parse::<T>() {
                Ok(v) => {
                    let bin = &mut cols[i];
                    bin.push(v);
                },
                Err(_err) => {
                    panic!("Unable to parse line-col {}-{}: {:?}", j, i, line)
                }
            }
        });
    });
    Ok(cols)
}
